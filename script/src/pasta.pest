/// # パスタスクリプト　字句構造
///
/// ## 1 エスケープ文字
/// ### 1-1 「＠」を識別文字として使える文脈で、
/// 「＠」の直後の文字が「＠、＃」の場合、
/// その文字を文字としてそのまま扱う。
/// > 例）＠＠　→「＠」
escape    = ${ esc_mark ~ esc_char }
esc_mark    = _{ AT }
esc_char        = @{ AT | SHARP }


/// ## 2 行の定義とコメント、空行、文書コメント
/// ### 2-1 「＃」文字から行末までをコメントとする。
comment         = ${ comment_mark ~ comment_str }
comment_mark    = _{ SHARP ~ skip_sp }
comment_str     = @{ skip_eol }

/// ### 2-2 残りが空白のみで構成される行を空行とする。
spaces_line     = ${ skip_sp ~ comment? ~ EOL }

/// ### 2-3 最初の柱行までは文頭コメントとして無視する。
doc_comment         = ${ doc_comment_line* }
doc_comment_line    = @{ !hasira_mark ~ skip_line } 

/// ### 2.4 識別エラーの判定
/// 行末の未処理文字列は、行末あるいはコメントである。
err_or_comment  = _{ skip_sp ~ ( comment | error ) }
error           = ${ error_token ~ error_remain }
error_token     = @{ NOT_EOL }
error_remain    = @{ skip_eol }


/// ## 3 属性
/// ### 3.1
/// 属性式は現在１キーワードで構成する。終端空白を消費してスキップする。
/// 将来拡張にて式・関数をサポート予定。
expr            = ${ expr_keyword ~ skip_sp }
expr_keyword    = @{ id }

/// ### 3.2
/// 属性種別は以下の5種類
action      = ${ AT     ~ expr }    /// ＠アクション
require     = ${ EXC    ~ expr }    /// ！すべてに一致
either      = ${ QUE    ~ expr }    /// ？いずれかに一致
forget      = ${ MINUS  ~ expr }    /// ー忘れる
memory      = ${ PLUS   ~ expr }    /// ＋覚える
all_attr    = ${( action | require | either | forget | memory ) ~ skip_sp }


/// ## 4 [柱/アクター]行（セクション）
/// ### 4.1
/// ０以上の「＠」に続けて有効な文字列で始まる柱行（セクション開始）とする。
/// 柱行は空白またはEOLで始まってはならない。

hasira_mark         = _{ AT }
hasira_not_title    = _{ SP | SHARP | EOL }
hasira_start        = @{ !hasira_not_title ~ hasira_mark* }

/// ### 4.2
/// 柱はマーク・タイトル・属性の列挙で構成される。
/// 属性の手前に空白を入れる。
hasira  = ${ hasira_start ~ h_title? ~ h_attrs? }
h_title = @{ ( !hasira_not_title ~ ANY )+ }
h_attrs = ${ h_split ~ h_attr+ }
h_split = _{ skip_sp1n }
h_attr  = _{ ( require | either | forget | memory | action ) ~ skip_sp }


// ## 5 [ト書き/セリフ]行
/// ### 5.1
/// セリフはコメント・アクション・EOLと認識されないすべての文字の
/// １つ以上の列挙で構成される。

/// ### 5.2
/// 「＠」「＃」を使いたい場合は、それぞれ「＠＠」「＠＃」を使う。
serif       = ${ ( s_normal | escape )+ }
s_normal    = @{ ( !( AT | SHARP | EOL ) ~ ANY )+ }

/// ### 5.3
/// ト書き/セリフ行はスペースで始まり、１つ以上のセリフまたは属性を列挙する。。
togaki      = ${ t_start ~ ( t_attr | serif )+ }
t_start     = _{ skip_sp1n }
t_attr      = _{ ( action | ( AT ~ ( require | either | forget | memory ) ) ) ~ skip_sp }


/// ## 6 行と文書
/// ### 6.1 行定義
/// 行定義は「[柱/アクター]行」・「[ト書き/セリフ]行」・「空行」のいずれかで認識され、
/// 未識別文字列について行末まで確認する。
line    = ${ ( togaki | hasira ) ~ err_or_comment }

/// ### 6.2 文書定義
/// 文章は文書コメントの後、行を列挙する。
script  = _{ doc_comment? ~ (line ~ EOL)* ~ (line ~ EOI)? }

// token

id          = @{ XID_START ~ XID_CONTINUE* }

spaces      = @{ SP+ }
skip_sp     = _{ SP* }
skip_sp1n   = _{ SP+ }
skip_eol    = _{ NOT_EOL* }
skip_line   = _{ skip_eol ~ EOL }

// MARK, CHAR

SP      = _{ SPACE_SEPARATOR | TAB }
TAB     = _{ "\t" }
DOT     = _{ "・" | "･" }
AT      = _{ "＠" | "@" }
EXC     = _{"！" | "!" }

QUE     = _{ "？" | "?" }
PLUS    = _{ "＋" | "+" }
MINUS   = _{ "－" | "-" }

COLON   = _{ "：" | ":" }
CONMA   = _{ "、" |"，" |"､" |"," }
SHARP   = _{ "＃" | "♯" | "#" }

EOL     = _{ "\r\n" | "\n" | "\r" }
NOT_EOL = _{ !EOL ~ ANY }


// Unicode Category
Pc  = _{ CONNECTOR_PUNCTUATION }    //  Pc: _‿⁀⁔︳︴﹍﹎﹏＿
Pd  = _{ DASH_PUNCTUATION }         //  Pd: -֊־᐀᠆‐‑‒–—―⸗⸚⸺⸻⹀〜〰゠︱︲﹘﹣－
Ps  = _{ OPEN_PUNCTUATION }         //  Ps: ([{⌈⌊ ...
Pe  = _{ CLOSE_PUNCTUATION }        //  Pe: )]}⌉⌋ ...
Pi  = _{ INITIAL_PUNCTUATION }      //  Pi: «‘‛“‟‹⸂⸄⸉⸌⸜⸠
Pf  = _{ FINAL_PUNCTUATION }        //  Pf: »’”›⸃⸅⸊⸍⸝⸡
Po  = _{ OTHER_PUNCTUATION }        //  Po: ︐︑︒︓︔︕︖ ...


//行頭禁則
//、。，．・？！゛゜ヽヾゝゞ々ー）］｝」』!),.:;?]}｡｣､･ｰﾞﾟ

//行末禁則
//（［｛「『([{｢

//ぶら下げ
//、。，．,.

// 参考：Unicodeルールで文脈で文字列を分割するクレート：unicode-segmentation

// EOF

